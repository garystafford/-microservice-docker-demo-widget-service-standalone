apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}

def major = '0.1'
def minor = System.env.SEMAPHORE_BUILD_NUMBER ?: '0'
def artifact_version = major + '.' + minor

jar {
    baseName = 'widget-service'
    version = artifact_version
}

repositories {
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

group = githubOrganization

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            from 'src/main/docker/filebeat.yml'
            from 'src/main/docker/filebeat.template.json'
            from 'src/main/docker/logstash-beats.crt'
            from 'src/main/docker/start.sh'
            into stageDir
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}
