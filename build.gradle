apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}

def application_name = 'widget-service'

def major = '0.2'
def minor = System.env.SEMAPHORE_BUILD_NUMBER ?: '0'
def artifact_version = major + '.' + minor

def latest_image = githubOrganization + '/' + application_name + ':' + 'latest'
def new_tagged_image = githubOrganization + '/' + application_name + ':' + artifact_version

def image_id

jar {
    baseName = application_name
    version = artifact_version
}

repositories {
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

group = githubOrganization

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile_sb')
    doFirst {
        copy {
            from jar
            from 'src/main/docker/filebeat.yml'
            from 'src/main/docker/filebeat.template.json'
            from 'src/main/docker/logstash-beats.crt'
            from 'src/main/docker/start.sh'
            into stageDir
        }
    }
}

task getImageId << {
    new ByteArrayOutputStream().withStream { id ->
        def result = exec {
            executable = 'docker'
            args = ['inspect', '--format="{{.Id}}"', latest_image]
            standardOutput = id
        }

        image_id = id.toString().trim()
    }
}

task tagImage(dependsOn: getImageId) {
    doLast {
        def result = exec {
            executable = 'docker'
            args = ['tag', image_id, new_tagged_image]
        }
    }
}

task pushImage(dependsOn: tagImage) {
    doLast {
        def result = exec {
            executable = 'docker'
            args = ['push', new_tagged_image]
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}
